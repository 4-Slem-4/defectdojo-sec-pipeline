name: DevSecOps Pipeline (DefectDojo)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write          # нужно для push в GHCR
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ toLower(github.repository) }}   # owner/repo в нижнем регистре
  IMAGE_NAME: ${{ env.IMAGE_BASE }}:${{ github.sha }}
  LATEST_TAG: ${{ env.IMAGE_BASE }}:latest

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build image
        run: docker build -t "$IMAGE_NAME" -t "$LATEST_TAG" .

      - name: Push image
        run: |
          docker push "$IMAGE_NAME"
          docker push "$LATEST_TAG"

  semgrep:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (SARIF)
        uses: returntocorp/semgrep-action@v1
        with:
          config: |
            p/python
            p/django
            p/owasp-top-ten
          generateSarif: true
          auditOn: push
      - name: Save Semgrep JSON
        run: |
          pipx install semgrep || true
          printf "configs:\n  - p/python\n  - p/django\n  - p/owasp-top-ten\n" > semgrep.yml
          semgrep ci --config semgrep.yml --json --output semgrep.json --timeout 600 || true
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: semgrep.json

  bandit:
    name: SAST - Bandit
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          bandit -r . -f json -o bandit.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: bandit
          path: bandit.json

  gitleaks:
    name: Secrets scan - Gitleaks
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git --report-format json --report-path gitleaks.json
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: gitleaks.json

  trivy:
    name: Image & Config scan - Trivy
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2

      - name: Trivy image scan
        continue-on-error: true
        run: trivy image --scanners vuln,secret --ignore-unfixed --format json -o trivy-image.json "$LATEST_TAG"

      - name: Trivy config scan (repo)
        continue-on-error: true
        run: trivy config --format json -o trivy-config.json .

      - uses: actions/upload-artifact@v4
        with:
          name: trivy
          path: |
            trivy-image.json
            trivy-config.json

  hadolint:
    name: Dockerfile Lint - Hadolint
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Run Hadolint
        uses: jbergstroem/hadolint-gh-action@v1
        with:
          dockerfile: Dockerfile

  dast:
    name: DAST - OWASP ZAP against ephemeral Dojo
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Create network
        run: docker network create dojo-net

      - name: Start DB & Redis
        run: |
          docker run -d --rm --name db --network dojo-net \
            -e MARIADB_ROOT_PASSWORD=rootpwd \
            -e MARIADB_DATABASE=defectdojo \
            -e MARIADB_USER=defectdojo \
            -e MARIADB_PASSWORD=dojopwd \
            mariadb:10.11
          docker run -d --rm --name redis --network dojo-net redis:7-alpine

      - name: Start DefectDojo
        run: |
          docker run -d --rm --name dojo --network dojo-net -p 8080:8080 \
            -e DD_DATABASE_ENGINE=django.db.backends.mysql \
            -e DD_DATABASE_HOST=db \
            -e DD_DATABASE_NAME=defectdojo \
            -e DD_DATABASE_USER=defectdojo \
            -e DD_DATABASE_PASSWORD=dojopwd \
            -e DD_DATABASE_PORT=3306 \
            -e DD_REDIS_HOST=redis \
            -e DD_SECRET_KEY=dev-secret-key \
            -e DD_ALLOWED_HOSTS="*" \
            -e DD_DEBUG=false \
            -e DD_ADMIN_USER=admin \
            -e DD_ADMIN_PASSWORD=Admin123! \
            -e DD_ADMIN_MAIL=admin@example.com \
            ${{ env.LATEST_TAG }}

      - name: Wait for Dojo
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080 >/dev/null; then echo "Dojo is up"; exit 0; fi
            sleep 5
          done
          echo "Dojo did not start in time"; docker logs dojo || true; exit 1

      - name: ZAP Baseline
        continue-on-error: true
        run: |
          docker run --rm --network dojo-net -v $PWD:/zap/wrk \
            owasp/zap2docker-stable zap-baseline.py \
            -t http://dojo:8080 -r zap-baseline.html -J zap-baseline.json -m 5 -d

      - name: ZAP Full Scan
        continue-on-error: true
        run: |
          docker run --rm --network dojo-net -v $PWD:/zap/wrk \
            owasp/zap2docker-stable zap-full-scan.py \
            -t http://dojo:8080 -r zap-full.html -J zap-full.json -m 5 -I

      - uses: actions/upload-artifact@v4
        with:
          name: zap
          path: |
            zap-baseline.html
            zap-baseline.json
            zap-full.html
            zap-full.json

      - name: Cleanup
        if: always()
        run: |
          docker rm -f dojo db redis || true
          docker network rm dojo-net || true

  gate:
    name: Security Gateway
    runs-on: ubuntu-latest
    needs: [semgrep, bandit, gitleaks, trivy, dast]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: semgrep
          path: art/semgrep
      - uses: actions/download-artifact@v4
        with:
          name: bandit
          path: art/bandit
      - uses: actions/download-artifact@v4
        with:
          name: gitleaks
          path: art/gitleaks
      - uses: actions/download-artifact@v4
        with:
          name: trivy
          path: art/trivy
      - uses: actions/download-artifact@v4
        with:
          name: zap
          path: art/zap

      - name: Decide
        run: |
          python - << 'PY'
          import json,sys
          def J(p):
            try: return json.load(open(p,encoding='utf-8'))
            except: return None
          def cnt_semgrep(d):
            c={"LOW":0,"MEDIUM":0,"HIGH":0,"CRITICAL":0}
            if not d: return c
            for r in d.get("results",[]):
              sev=(r.get("extra",{}).get("severity","") or "").upper()
              if sev=="ERROR": c["HIGH"]+=1
              elif sev=="WARNING": c["MEDIUM"]+=1
              else: c["LOW"]+=1
            return c
          def cnt_bandit(d):
            c={"LOW":0,"MEDIUM":0,"HIGH":0,"CRITICAL":0}
            if not d: return c
            for r in d.get("results",[]):
              sev=(r.get("issue_severity","") or "").upper()
              if sev in c: c[sev]+=1
            return c
          def cnt_trivy(d):
            c={"LOW":0,"MEDIUM":0,"HIGH":0,"CRITICAL":0}
            if not d: return c
            for res in d.get("Results",[]) or []:
              for v in res.get("Vulnerabilities",[]) or []:
                s=(v.get("Severity","") or "").upper()
                if s in c: c[s]+=1
            return c
          def cnt_zap(d):
            c={"LOW":0,"MEDIUM":0,"HIGH":0,"CRITICAL":0}
            if not d: return c
            alerts=d.get("alerts")
            if alerts is None:
              alerts=[]
              for s in d.get("site",[]) or []: alerts += s.get("alerts",[]) or []
            for a in alerts:
              risk=(a.get("risk","") or a.get("riskdesc","")).upper()
              if "HIGH" in risk: c["HIGH"]+=1
              elif "MEDIUM" in risk: c["MEDIUM"]+=1
              else: c["LOW"]+=1
            return c
          def has_gitleaks(d): return isinstance(d,list) and len(d)>0
          sem=cnt_semgrep(J("art/semgrep/semgrep.json"))
          ban=cnt_bandit(J("art/bandit/bandit.json"))
          tri=cnt_trivy(J("art/trivy/trivy-image.json"))
          zap=cnt_zap(J("art/zap/zap-full.json") or J("art/zap/zap-baseline.json"))
          gtl=has_gitleaks(J("art/gitleaks/gitleaks.json"))
          tot={k:sem.get(k,0)+ban.get(k,0)+tri.get(k,0)+zap.get(k,0) for k in ["LOW","MEDIUM","HIGH","CRITICAL"]}
          print("SUMMARY:", {"semgrep":sem,"bandit":ban,"trivy":tri,"zap":zap,"gitleaks":gtl,"total":tot})
          if gtl: print("FAIL: secrets found"); sys.exit(1)
          if tot["CRITICAL"]>0: print("FAIL: critical issues"); sys.exit(1)
          if tot["HIGH"]>=5: print("FAIL: too many HIGH"); sys.exit(1)
          print("SECURITY GATE: OK"); sys.exit(0)
          PY
