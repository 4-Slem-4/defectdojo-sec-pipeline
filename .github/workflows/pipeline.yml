name: DevSecOps pipeline (local DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  FAIL_ON_CRITICAL: "true"   

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build_and_push:
    name: Stage 1 – Build & push image to GHCR
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=raw,value=latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

    sast_secrets_config:
    name: Stage 2/4 – SAST + Secrets + Config
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      # Bandit (Python) → bandit.sarif
      - name: Run bandit
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          bandit -r . -f sarif -o bandit.sarif || true

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit
        if: always()

      # Semgrep → semgrep.sarif
      - name: Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true
          output: semgrep.sarif 
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN || '' }}  

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep
        if: always()

      # Gitleaks → gitleaks.sarif
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --report-format sarif --report-path gitleaks.sarif || true

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks
        if: always()

      # Trivy (образ) → trivy.sarif
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: 0

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy
        if: always()


    run_target:
    name: Stage 3 – Run target locally (for DAST)
    runs-on: ubuntu-24.04
    needs: build_and_push
    env:
      IMAGE: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
    steps:
      - name: Pull image
        run: docker pull "$IMAGE"

      - name: Run container
        run: |
          docker rm -f target || true
          docker run -d --name target -p 8080:8080 "$IMAGE"
          # ждём пока поднимется
          for i in {1..30}; do
            if curl -fsS http://localhost:8080/ >/dev/null 2>&1; then
              echo "Target is up"; break
            fi
            sleep 2
          done

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: ''
          cmd_options: '-a'   
        continue-on-error: true

      - name: Stop container
        if: always()
        run: docker rm -f target || true


  dast:
    name: Stage 4 – DAST (ZAP baseline on localhost)
    runs-on: ubuntu-24.04
    needs: [run_target_locally]
    steps:
      - uses: actions/checkout@v4

      - name: ZAP Baseline
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: http://localhost:8080
          cmd_options: -a -m 5 -I -J zap.json -w zap.md -r zap.html -x zap.xml
        continue-on-error: true

      - name: Upload ZAP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline
          path: |
            zap.json
            zap.xml
            zap.html
            zap.md
        if: always()

      - name: Stop container
        if: always()
        run: docker rm -f target || true

    security_gate:
    name: Stage 5 – Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, run_target]
    if: always()
    steps:
      - name: Gate summary
        shell: bash
        run: |
          echo "Checking for CRITICAL findings..."
          # пример простого гейта по наличию строк "CRITICAL" в SARIF
          if grep -qi '"level": *"error"' bandit.sarif semgrep.sarif gitleaks.sarif trivy.sarif 2>/dev/null; then
            echo "❌ Blocking release: CRITICAL issues found"
            exit 1
          fi
          echo "✅ No blocking findings"
