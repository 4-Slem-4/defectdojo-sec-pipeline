name: DevSecOps pipeline (DefectDojo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  # Хочешь, чтобы Gate падал при CRITICAL? Поставь true.
  FAIL_ON_CRITICAL: "false"

jobs:
  # ─────────────────────────────────────────────────────────────
  # Stage 1 — Build & push image to GHCR
  # ─────────────────────────────────────────────────────────────
  build_and_push:
    name: Stage 1 - Build & push image to GHCR
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag:   ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      # Если в репо нет Dockerfile — сгенерим простой
      - name: Ensure Dockerfile (fallback)
        shell: bash
        run: |
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile <<'EOF'
            FROM nginx:1.27.2-alpine
            RUN echo OK > /usr/share/nginx/html/healthz
            EXPOSE 80
            CMD ["nginx","-g","daemon off;"]
            EOF
          fi

      # Собираем имя образа в lowercase + короткий тег = SHA12
      - name: Compute image meta (lowercase)
        id: meta
        shell: bash
        run: |
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          repo="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')"
          echo "image=ghcr.io/${owner}/${repo}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_SHA::12}"       >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}

  # ─────────────────────────────────────────────────────────────
  # Stage 2 — SAST + Secrets + Config
  # ─────────────────────────────────────────────────────────────
  sast_secrets_config:
    name: Stage 2/4 - SAST + Secrets + Config
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      # Bandit (Python SAST)
      - name: Run Bandit
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          bandit -r . -f sarif -o bandit.sarif || true

      # Semgrep (универсальный SAST)
      - name: Run Semgrep
        shell: bash
        run: |
          pip install semgrep
          semgrep --config auto --sarif -o semgrep.sarif || true

      # Gitleaks (Secrets)
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --report-format sarif --report-path gitleaks.sarif

      # Hadolint (Dockerfile)
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile

      # Trivy (скан образа)
      - name: Run Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
          format: sarif
          output: trivy-image.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: 0

  # ─────────────────────────────────────────────────────────────
  # Stage 3 — DAST (плейсхолдер)
  # ─────────────────────────────────────────────────────────────
  dast:
    name: Stage 3 - DAST (placeholder)
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: DAST stage placeholder
        run: echo "DAST is skipped here (OWASP ZAP vs ephemeral Dojo was too heavy for GitHub runners)."

  # ─────────────────────────────────────────────────────────────
  # Stage 5 — Security Gate
  # ─────────────────────────────────────────────────────────────
  security_gate:
    name: Stage 5 - Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Gate summary
        id: gate
        shell: bash
        run: |
          shopt -s nullglob
          files=( *.sarif )
          echo "Found SARIF files: ${#files[@]}"
          total=0
          crit=0
          high=0
          for f in "${files[@]}"; do
            echo "::group::Parse $f"
            c_total=$(grep -ci '"ruleId"' "$f" || true)
            c_crit=$(grep -ci '"severity": "CRITICAL"' "$f" || true)
            c_high=$(grep -ci '"severity": "HIGH"' "$f" || true)
            echo "total=$c_total crit=$c_crit high=$c_high in $f"
            total=$((total + c_total))
            crit=$((crit + c_crit))
            high=$((high + c_high))
            echo "::endgroup::"
          done
          echo "TOTAL findings: $total; CRITICAL: $crit; HIGH: $high"
          echo "crit=$crit" >> "$GITHUB_OUTPUT"

      - name: Block on CRITICAL (optional)
        if: ${{ env.FAIL_ON_CRITICAL == 'true' && steps.gate.outputs.crit != '0' }}
        run: |
          echo "Blocking release: critical vulnerabilities found (${{ steps.gate.outputs.crit }})"
          exit 1
