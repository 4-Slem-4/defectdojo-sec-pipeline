name: DevSecOps pipeline (DefectDojo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  FAIL_ON_CRITICAL: "true"   # флаг для Gate (оставил, если захочешь мягкий режим)

jobs:
  # =========================
  # Stage 1 — Build & push
  # =========================
  build_and_push:
    name: Stage 1 – Build & push image to GHCR
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag:   ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      # Вычисляем имя образа и короткий тег
      - name: Compute image meta (lowercase)
        id: meta
        shell: bash
        run: |
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "image=ghcr.io/${owner}/${repo}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}

      - name: Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.image }}:latest

  # ==========================================
  # Stage 2 — SAST + Secrets + Config (SARIF)
  # ==========================================
  sast_secrets_config:
    name: Stage 2/4 – SAST + Secrets + Config
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      # --- Bandit (Python) -> bandit.sarif ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Bandit (SARIF)
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          bandit -r . -f sarif -o bandit.sarif || true

      # --- Semgrep -> semgrep.sarif ---
      - name: Semgrep (SARIF)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true
        continue-on-error: true

      - name: Normalize Semgrep SARIF filename
        shell: bash
        run: |
          if [ -f results.sarif ] && [ ! -f semgrep.sarif ]; then
            mv results.sarif semgrep.sarif
          fi

      # --- Gitleaks (secrets) -> gitleaks.sarif ---
      - name: Gitleaks (SARIF)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --report-format sarif --report-path gitleaks.sarif --exit-code 0
        continue-on-error: true

      # --- Hadolint (Dockerfile lint) ---
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
        continue-on-error: true

      # --- Trivy image scan -> trivy.sarif ---
      - name: Trivy image scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: 0
        continue-on-error: true

      # --- Debug: показать, какие *.sarif реально есть ---
      - name: Debug SARIF files
        shell: bash
        run: |
          echo "=== Found SARIF ==="
          ls -la *.sarif || echo "No SARIF files found"

      # --- Upload SARIF (только если файл есть) ---
      - name: Upload Bandit SARIF
        if: always() && hashFiles('bandit.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit

      - name: Upload Semgrep SARIF
        if: always() && hashFiles('semgrep.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

      - name: Upload Gitleaks SARIF
        if: always() && hashFiles('gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

      - name: Upload Trivy SARIF
        if: always() && hashFiles('trivy.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy

  # ==========================================
  # Stage 3 — DAST (OWASP ZAP baseline)
  # ==========================================
  dast:
    name: Stage 3 – DAST (ZAP baseline)
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Поднимаем наш образ локально (ожидается, что приложение слушает 8080)
      - name: Run target container
        id: run_target
        shell: bash
        env:
          IMG: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
        run: |
          set -eu
          docker run -d --rm --name target -p 8080:8080 "$IMG"
          # ждём старта (до ~60с)
          for i in $(seq 1 60); do
            if curl -fsS -m 2 http://localhost:8080/ >/dev/null 2>&1; then
              echo "App is up"
              exit 0
            fi
            sleep 1
          done
          echo "App did not become ready on :8080"
          docker logs target || true
          exit 1

      # ZAP baseline scan; сохраняем отчёты и НЕ фейлим стадию (Gate решит)
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "http://localhost:8080"
          cmd_options: "-a -J"     # -a активные пасс. проверки, -J -> JSON отчёт
          fail_action: false
        continue-on-error: true

      - name: Collect ZAP artifacts
        if: always()
        shell: bash
        run: |
          # action кладёт артефакты в workspace: report_html.html, report_json.json, etc.
          ls -la
          mkdir -p zap
          # переносим самое полезное, если есть
          [ -f report_json.json ]  && mv report_json.json  zap/zap_report.json
          [ -f report_html.html ]  && mv report_html.html  zap/zap_report.html
          [ -f zap.out ] && cp zap.out zap/zap_console.log || true
          ls -la zap || true

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap/

      - name: Stop target container
        if: always()
        run: docker rm -f target || true

  # =========================
  # Stage 5 — Security Gate
  # =========================
  security_gate:
    name: Stage 5 – Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, dast]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download ZAP artifacts
        uses: actions/download-artifact@v4
        with:
          name: zap-reports
          path: zap/

      - name: Login to GHCR (for additional strict Trivy gate)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Жёсткий порог: Trivy — CRITICAL => fail
      - name: Trivy Gate (fail on CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
          severity: 'CRITICAL'
          ignore-unfixed: false
          format: table
          exit-code: '1'

      # Жёсткий порог: ZAP — High alerts => fail
      - name: ZAP Gate (fail on High risk findings)
        shell: bash
        run: |
          set -e
          if [ ! -f zap/zap_report.json ]; then
            echo "::warning::ZAP JSON report not found; skipping ZAP gate."
            exit 0
          fi
          # Посчитаем High из JSON (riskcode: 3)
          HIGHS=$(jq '[.. | objects | select(has("riskcode")) | select(.riskcode|tonumber>=3)] | length' zap/zap_report.json)
          echo "ZAP High-or-higher alerts: $HIGHS"
          if [ "$HIGHS" -gt 0 ]; then
            echo "❌ ZAP Gate: High alerts found ($HIGHS). Failing."
            exit 1
          else
            echo "✅ ZAP Gate: no High alerts."
          fi

      - name: Final summary
        if: always()
        shell: bash
        run: |
          echo "Security Gate finished."
          echo "Trivy CRITICAL and ZAP High thresholds are enforced."
