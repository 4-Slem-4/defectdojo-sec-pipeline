name: DevSecOps pipeline (DefectDojo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    name: Stage 1 — Build & push image to GHCR
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Ensure Dockerfile (fallback)
        shell: bash
        run: |
          if [ ! -f Dockerfile ]; then
            printf '%s\n' \
'FROM nginx:alpine' \
'RUN echo OK > /usr/share/nginx/html/healthz' \
'EXPOSE 80' \
'CMD ["nginx","-g","daemon off;"]' > Dockerfile
          fi

      - name: Compute image name (lowercase)
        id: meta
        shell: bash
        run: |
          owner=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          repo=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          echo "image=ghcr.io/${owner}/${repo}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: docker build -t ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }} .

      - name: Push
        run: docker push ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}

  sast_secrets_config:
    name: Stage 2/4 — SAST + Secrets + Config
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: Run Bandit
        uses: pyupio/safety-action@v1

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v --report-format sarif --report-path gitleaks.sarif

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile

      - name: Run Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}

  dast:
    name: Stage 3 — DAST (ZAP) against ephemeral Dojo
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: "http://localhost:8080"

  security_gate:
    name: Stage 5 — Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, dast]
    if: always()
    steps:
      - name: Check vulnerabilities
        run: |
          echo "Blocking release if critical vulnerabilities are found"
          # здесь можно добавить условия проверки отчётов (например, grep по SARIF)
