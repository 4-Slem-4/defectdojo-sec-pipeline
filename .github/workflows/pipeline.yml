name: DevSecOps pipeline (DefectDojo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  FAIL_ON_CRITICAL: "true"  

jobs:
  # =========================
  # Stage 1 — Build & push
  # =========================
  build_and_push:
    name: Stage 1 – Build & push image to GHCR
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag:   ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      # Если в репо нет Dockerfile — сгенерим простой
      - name: Ensure Dockerfile (fallback)
        shell: bash
        run: |
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile <<EOF
            FROM defectdojo/defectdojo-django:2.28.3
            EXPOSE 8080
            CMD ["nginx","-g","daemon off;"]
            EOF
          fi

      - name: Compute image meta (lowercase)
        id: meta
        shell: bash
        run: |
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "image=ghcr.io/${owner}/${repo}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}

      - name: Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.image }}:latest

  # ==========================================
  # Stage 2 — SAST + Secrets + Config (SARIF)
  # ==========================================
  sast_secrets_config:
    name: Stage 2/4 – SAST + Secrets + Config
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      # --- Bandit (Python) ---
      - name: Run bandit
        run: |
          pip install --upgrade pip
          pip install bandit
          bandit -r . -f sarif -o bandit.sarif || true
      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit
        if: always()

      # --- Semgrep ---
      - name: Run semgrep
        run: |
          pip install semgrep
          semgrep --config=p/ci --sarif -o semgrep.sarif || true
      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep
        if: always()

      # --- Gitleaks (secrets) ---
      - name: Run gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          ./gitleaks detect --source . --no-git --report-format sarif --report-path gitleaks.sarif || true
      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks
        if: always()

      # --- Hadolint (Dockerfile) ---
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
        continue-on-error: true

      # --- Trivy (image & config) ---
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: 0
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy
        if: always()

  # ===================================================
  # Stage 3 — DAST (можно оставить как placeholder)
  # ===================================================
  dast:
    name: Stage 3 – DAST (placeholder)
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: DAST placeholder
        run: echo "DAST step can run ZAP here (disabled for Actions runners demo)."

  # =========================
  # Stage 5 — Security Gate
  # =========================
  security_gate:
    name: Stage 5 – Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, dast]
    if: always()
    steps:
      - name: Gate summary
        shell: bash
        run: |
          echo "Security Gate: здесь можно парсить *.sarif и падать по порогу."
          echo "Сейчас пропускаем, чтобы пайплайн не падал на демо."
