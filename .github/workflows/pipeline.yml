name: DevSecOps pipeline (DefectDojo)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  FAIL_ON_CRITICAL: "true"  

jobs:
  # =========================================================
  # Stage 1 — Build & push image to GHCR
  # =========================================================
  build_and_push:
    name: Stage 1 – Build & push image to GHCR
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute image meta (lowercase)
        id: meta
        shell: bash
        run: |
          owner=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          repo=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          echo "image=ghcr.io/${owner}/${repo}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_SHA::12}" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.image }}:latest

  # =========================================================
  # Stage 2 — SAST + Secrets + Config
  # =========================================================
  sast_secrets_config:
    name: Stage 2/4 – SAST + Secrets + Config
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      # ---------- Bandit (Python) ----------
      - name: Run bandit
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          bandit -r . -f sarif -o bandit.sarif || true

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit
        if: always()

      # ---------- Semgrep ----------
      - name: Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true
          output: semgrep.sarif
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN || '' }}
        continue-on-error: true

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep
        if: always()

      # ---------- Gitleaks (secrets) ----------
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --report-format sarif --report-path gitleaks.sarif || true

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks
        if: always()

      # ---------- Hadolint (Dockerfile) ----------
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
        continue-on-error: true

      # ---------- Trivy (image + config) ----------
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: 0

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy
        if: always()

  # =========================================================
  # Stage 3 — Run target locally (for DAST)
  # =========================================================
  run_target:
    name: Stage 3 – Run target locally (for DAST)
    runs-on: ubuntu-24.04
    needs: build_and_push
    env:
      IMAGE: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
    steps:
      - name: Pull image
        run: docker pull "$IMAGE"

      - name: Run container
        run: |
          docker rm -f target || true
          docker run -d --name target -p 8080:8080 "$IMAGE"
          # ждем старта
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/ >/dev/null 2>&1; then
              echo "Target is up"; break
            fi
            sleep 2
          done

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-a'
        continue-on-error: true

      - name: Stop container
        if: always()
        run: docker rm -f target || true

  # =========================================================
  # Stage 5 — Security Gate
  # =========================================================
  security_gate:
    name: Stage 5 – Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, run_target]
    if: always()
    steps:
      - name: Gate summary
        shell: bash
        run: |
          echo "Security Gate: checking for CRITICAL findings..."
          # Пример простого гейта: ищем "level":"error" в SARIF
          found_crit=0
          for f in bandit.sarif semgrep.sarif gitleaks.sarif trivy.sarif; do
            if [ -f "$f" ] && grep -qi '"level"[[:space:]]*:[[:space:]]*"error"' "$f"; then
              echo "Found CRITICAL/Error in $f"
              found_crit=1
            fi
          done

          if [ "$FAIL_ON_CRITICAL" = "true" ] && [ $found_crit -eq 1 ]; then
            echo "❌ Blocking release due to CRITICAL findings."
            exit 1
          fi

          echo "✅ Gate passed (or FAIL_ON_CRITICAL=false)."
