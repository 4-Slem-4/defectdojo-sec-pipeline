name: DevSecOps Pipeline (GHCR + SAST + Trivy + DAST)

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_push:
    name: Build & Push Docker image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # <-- ВАЖНО: считаем имя образа в НИЖНЕМ регистре
      - name: Compute image coordinates (lowercase)
        id: img
        shell: bash
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          REPO_LC="$(basename "$GITHUB_REPOSITORY")"
          REPO_LC="${REPO_LC,,}"
          IMAGE_BASE="ghcr.io/${OWNER_LC}/${REPO_LC}"
          LATEST_TAG="${IMAGE_BASE}:latest"
          COMMIT_TAG="${IMAGE_BASE}:${GITHUB_SHA::7}"

          echo "image_base=${IMAGE_BASE}"  >> "$GITHUB_OUTPUT"
          echo "latest_tag=${LATEST_TAG}"  >> "$GITHUB_OUTPUT"
          echo "commit_tag=${COMMIT_TAG}"  >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build + Push (latest, sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.img.outputs.latest_tag }}
            ${{ steps.img.outputs.commit_tag }}

  sast_bandit:
    name: SAST - Bandit
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit
        run: |
          pipx install bandit
          bandit -r . -f sarif -o bandit.sarif || true
      - uses: actions/upload-artifact@v4
        with:
          name: bandit-sarif
          path: bandit.sarif

  sast_semgrep:
    name: SAST - Semgrep
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (auto rules)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif
          path: semgrep.sarif

  secrets_gitleaks:
    name: Secrets scan - Gitleaks
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --redact --report-format sarif --report-path gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks-sarif
          path: gitleaks.sarif

  trivy_image:
    name: Image & Config scan - Trivy
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - name: Trivy image scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ needs.build_and_push.outputs.latest_tag || '' }}
        env:
          # если outputs недоступны напрямую — считываем повторно так же, как в build job
          IMAGE_BASE: ghcr.io/${{ github.repository_owner }}}/${{ github.event.repository.name }}
      - name: Trivy (robust) — recompute tag and scan
        if: always()
        shell: bash
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          REPO_LC="$(basename "$GITHUB_REPOSITORY")"; REPO_LC="${REPO_LC,,}"
          IMG="ghcr.io/${OWNER_LC}/${REPO_LC}:latest"
          docker pull "$IMG"
          trivy image --exit-code 0 --format sarif --output trivy.sarif "$IMG"
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy.sarif

  hadolint:
    name: Dockerfile Lint - Hadolint
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: Run hadolint
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint.txt || true
      - uses: actions/upload-artifact@v4
        with:
          name: hadolint
          path: hadolint.txt

  dast:
    name: DAST - OWASP ZAP against ephemeral target
    runs-on: ubuntu-24.04
    needs:
      - build_and_push
      - trivy_image
      - sast_bandit
      - sast_semgrep
      - secrets_gitleaks
      - hadolint
    steps:
      - name: Start OWASP Juice Shop (as target)
        run: |
          docker run -d --rm --name juice -p 8080:3000 bkimminich/juice-shop:latest

      - name: Wait for target
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080 >/dev/null 2>&1; then
              echo "Target is up"
              exit 0
            fi
            sleep 2
          done
          echo "Target did not start" >&2
          docker ps -a
          exit 1

      - name: ZAP Baseline Scan
        run: |
          docker run --rm \
            -v "$PWD:/zap/wrk" \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:8080 \
            -r zap-report.html \
            -x zap-report.xml \
            -J zap-report.json || true

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.xml
            zap-report.json

  gate:
    name: Security Gateway
    runs-on: ubuntu-24.04
    needs:
      - trivy_image
      - sast_bandit
      - sast_semgrep
      - secrets_gitleaks
      - hadolint
      - dast
    steps:
      - name: Dummy gate (always pass for now)
        run: echo "Gate: OK"
