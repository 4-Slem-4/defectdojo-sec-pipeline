name: DevSecOps pipeline (DefectDojo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  FAIL_ON_CRITICAL: "true"  

jobs:
  # =========================
  # Stage 1 — Build & push
  # =========================
  build_and_push:
    name: Stage 1 – Build & push image to GHCR
    runs-on: ubuntu-24.04
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag:   ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

     
      - name: Compute image meta (lowercase)
        id: meta
        shell: bash
        run: |
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          repo="${GITHUB_REPOSITORY#*/}"
          echo "image=ghcr.io/${owner}/${repo}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}

      - name: Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.image }}:latest

  # ==========================================
  # Stage 2 — SAST + Secrets + Config (SARIF)
  # ==========================================
    sast_secrets_config:
      name: Stage 2/4 – SAST + Secrets + Config
      runs-on: ubuntu-24.04
      needs: build_and_push
      steps:
        - uses: actions/checkout@v4

      # Bandit (Python)
        - name: Install Bandit
          run: |
            python3 -m pip install --upgrade pip
            pip install bandit
        - name: Run bandit
          run: |
            bandit -r . -f sarif -o bandit.sarif || true

        # Semgrep
        - name: Run semgrep
          uses: returntocorp/semgrep-action@v1
          with:
            config: p/ci
            generateSarif: true
          continue-on-error: true
        - name: Normalize semgrep sarif name
          run: |
            # semgrep-action кладёт файл semgrep.sarif; на всякий случай нормализуем
            if [ -f semgrep.sarif ]; then
              :
            elif [ -f results.sarif ]; then
              mv results.sarif semgrep.sarif
            fi

        # Gitleaks (секреты)
        - name: Run gitleaks
          uses: gitleaks/gitleaks-action@v2
          with:
            args: detect --source . --no-git --report-format sarif --report-path gitleaks.sarif --exit-code 0
          continue-on-error: true

        # Hadolint (линт Dockerfile) 
        - name: Hadolint
          uses: hadolint/hadolint-action@v3.1.0
          with:
            dockerfile: ./Dockerfile
          continue-on-error: true

        # Trivy
        - name: Trivy image scan
          uses: aquasecurity/trivy-action@0.24.0
          with:
            image-ref: ${{ needs.build_and_push.outputs.image }}:${{ needs.build_and_push.outputs.tag }}
            format: sarif
            output: trivy.sarif
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH,MEDIUM,LOW'
            exit-code: 0
          continue-on-error: true

        # Небольшая проверка чтобы сразу видеть, что файлы появились
        - name: List SARIF files (debug)
          run: ls -la *.sarif || true

        # Uploads
        - name: Upload Bandit SARIF
          if: always()
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: bandit.sarif
            category: bandit

        - name: Upload Semgrep SARIF
          if: always()
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: semgrep.sarif
            category: semgrep

        - name: Upload Gitleaks SARIF
          if: always()
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: gitleaks.sarif
            category: gitleaks

        - name: Upload Trivy SARIF
          if: always()
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: trivy.sarif
            category: trivy


  # ===================================================
  # Stage 3 — DAST (можно оставить как placeholder)
  # ===================================================
  dast:
    name: Stage 3 – DAST (placeholder)
    runs-on: ubuntu-24.04
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: DAST placeholder
        run: echo "DAST step can run ZAP here (disabled for Actions runners demo)."

  # =========================
  # Stage 5 — Security Gate
  # =========================
  security_gate:
    name: Stage 5 – Security Gate
    runs-on: ubuntu-24.04
    needs: [build_and_push, sast_secrets_config, dast]
    if: always()
    steps:
      - name: Gate summary
        shell: bash
        run: |
          echo "Security Gate: здесь можно парсить *.sarif и падать по порогу."
          echo "Сейчас пропускаем, чтобы пайплайн не падал на демо."
