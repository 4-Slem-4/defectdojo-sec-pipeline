name: DevSecOps Pipeline (DefectDojo)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

env:
  IMAGE_BASE: ghcr.io/${{ github.repository }}
  IMAGE_LATEST: latest

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: tags
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_OUTPUT
          echo "IMG=${REPO_LC}" >> $GITHUB_OUTPUT
          echo "TAG_SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build image
        run: |
          IMAGE_NAME="ghcr.io/${{ steps.tags.outputs.IMG }}"
          docker build -t "$IMAGE_NAME:${{ env.IMAGE_LATEST }}" -t "$IMAGE_NAME:${{ steps.tags.outputs.TAG_SHA }}" .

      - name: Push image
        run: |
          IMAGE_NAME="ghcr.io/${{ steps.tags.outputs.IMG }}"
          docker push "$IMAGE_NAME:${{ env.IMAGE_LATEST }}"
          docker push "$IMAGE_NAME:${{ steps.tags.outputs.TAG_SHA }}"

  sast_semgrep:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true
          upload-sarif: true

  sast_bandit:
    name: SAST - Bandit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install bandit
        run: pip install bandit
      - name: Run bandit
        run: |
          bandit -r . -f sarif -o bandit.sarif || true
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

  secrets_gitleaks:
    name: Secrets scan - Gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run gitleaks (docker)
        run: |
          docker run --rm -v $PWD:/repo zricethezav/gitleaks:8 \
            detect --source=/repo --redact --no-git \
            --report-format=json --report-path=/repo/gitleaks.json || true
      - name: Upload gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks.json
          path: gitleaks.json
          if-no-files-found: ignore

  trivy:
    name: Image & Config scan - Trivy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ env.IMAGE_LATEST }}
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

  hadolint:
    name: Dockerfile Lint - Hadolint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3007,DL3008
      - name: Note about latest tag (warning only)
        run: echo "Using 'latest' may be unstable; pin versions." || true

  dast_zap:
    name: DAST - OWASP ZAP against ephemeral Dojo
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout this repo (weâ€™ll keep artifacts here)
        uses: actions/checkout@v4

      - name: Install docker compose plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Checkout DefectDojo upstream
        uses: actions/checkout@v4
        with:
          repository: DefectDojo/django-DefectDojo
          path: dojo

      - name: Prepare env for compose
        working-directory: dojo
        run: |
          cat > .env.dast <<'EOF'
          DD_DATABASE_ENGINE=django.db.backends.mysql
          DD_DATABASE_HOST=db
          DD_DATABASE_NAME=defectdojo
          DD_DATABASE_USER=defectdojo
          DD_DATABASE_PASSWORD=dojo
          DD_DATABASE_PORT=3306
          DD_REDIS_HOST=redis
          DD_SECRET_KEY=dev-secret
          DD_ALLOWED_HOSTS=*
          DD_DEBUG=false
          DD_ADMIN_USER=admin
          DD_ADMIN_PASSWORD=admin123!
          DD_ADMIN_MAIL=admin@example.com
          EOF

      - name: Launch Dojo stack (db+redis+django+nginx)
        working-directory: dojo
        run: |
          docker compose -f docker-compose.yml --env-file .env.dast up -d db redis django nginx
          docker ps

      - name: Wait for Dojo (up to 10 minutes)
        shell: bash
        run: |
          ATTEMPTS=120   # 120 * 5s = 10 min
          for i in $(seq 1 $ATTEMPTS); do
            if curl -fsS http://localhost:8080/ > /dev/null; then
              echo "Dojo is up"; exit 0
            fi
            sleep 5
          done
          echo "Dojo did not start in time"
          docker compose -f dojo/docker-compose.yml --env-file dojo/.env.dast logs --no-color > dojo-logs.txt || true
          exit 1

      - name: ZAP Baseline Scan
        continue-on-error: true
        run: |
          docker run --rm --network host \
            -v $PWD:/zap/wrk \
            owasp/zap2docker-stable \
            zap-baseline.py -t http://localhost:8080/ -r zap-baseline.html -x zap-baseline.xml || true
      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-baseline.html
            zap-baseline.xml
          if-no-files-found: ignore

      - name: Compose logs (artifact)
        if: always()
        run: |
          docker compose -f dojo/docker-compose.yml --env-file dojo/.env.dast logs --no-color > dojo-logs.txt || true
        continue-on-error: true
      - name: Upload Dojo logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dojo-logs
          path: dojo-logs.txt
          if-no-files-found: ignore

      - name: Cleanup
        if: always()
        working-directory: dojo
        run: |
          docker compose -f docker-compose.yml --env-file .env.dast down -v || true

  gate:
    name: Security Gateway
    needs: [build, sast_semgrep, sast_bandit, secrets_gitleaks, trivy, hadolint, dast_zap]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: zap-reports
          path: gate_artifacts
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: codeql-sarif
          path: gate_artifacts
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: gitleaks.json
          path: gate_artifacts
        continue-on-error: true
      - name: Download trivy SARIF
        uses: actions/download-artifact@v4
        with:
          name: trivy.sarif
          path: gate_artifacts
        continue-on-error: true

      - name: Enforce policy (fail on HIGH/CRITICAL or ZAP FAIL)
        run: |
          FAIL=0
          echo "=== Security Gate ==="
          if [ -f gate_artifacts/trivy.sarif ]; then
            CRIT=$(grep -o '"level":"error"' gate_artifacts/trivy.sarif | wc -l | tr -d ' ')
            if [ "$CRIT" -gt 0 ]; then
              echo "Trivy: found HIGH/CRITICAL findings"; FAIL=1
            fi
          fi
          if [ -f gate_artifacts/zap-baseline.xml ]; then
            if grep -q 'FAIL' gate_artifacts/zap-baseline.xml; then
              echo "ZAP baseline has FAILs"; FAIL=1
            fi
          fi
          if [ -f gate_artifacts/gitleaks.json ]; then
            if [ "$(wc -c < gate_artifacts/gitleaks.json)" -gt 3 ] && ! grep -q 'No leaks detected' gate_artifacts/gitleaks.json 2>/dev/null; then
              echo "Gitleaks: possible secrets detected"; FAIL=1
            fi
          fi
          if [ "$FAIL" -ne 0 ]; then
            echo "Security Gate: BLOCK RELEASE"; exit 1
          else
            echo "Security Gate: OK"
          fi
